<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Income Distribution Lookup</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f9f9f9;
      margin: 20px;
    }
    h1, h2, h3 {
      color: #333;
    }
    label {
      font-weight: bold;
    }
    select, button {
      padding: 8px;
      margin: 10px 0;
      width: 100%;
      max-width: 300px;
    }
    #result {
      margin-top: 20px;
      background-color: #fff;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 5px;
      max-width: 600px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    th, td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
  </style>
</head>
<body>
  <h1>Income Distribution Lookup</h1>
  <p>
    Select a state and county to retrieve household income distribution data.
  </p>
  
  <!-- State Dropdown -->
  <div>
    <label for="state-select">Select State:</label>
    <select id="state-select">
      <option value="">--Select State--</option>
      <!-- Options will be populated dynamically -->
    </select>
  </div>
  
  <!-- County Dropdown -->
  <div>
    <label for="county-select">Select County:</label>
    <select id="county-select">
      <option value="">--Select County--</option>
    </select>
  </div>
  
  <!-- Button to trigger the API request -->
  <button id="get-income-btn">Get Income Distribution Data</button>
  
  <!-- Result display -->
  <div id="result"></div>
  
  <script>
    // Populate state dropdown on page load using the Census API.
    fetch('https://api.census.gov/data/2023/acs/acs5?get=NAME&for=state:*')
      .then(response => response.json())
      .then(data => {
        const stateSelect = document.getElementById('state-select');
        // Clear any existing options (if necessary)
        stateSelect.innerHTML = '<option value="">--Select State--</option>';
        // Skip header row (data[0]) and add each state as an option.
        for (let i = 1; i < data.length; i++) {
          const stateName = data[i][0];
          const stateFips = data[i][1];
          const option = document.createElement('option');
          option.value = stateFips;
          option.textContent = stateName;
          stateSelect.appendChild(option);
        }
      })
      .catch(error => console.error('Error fetching states:', error));
    
    // Populate county dropdown when a state is selected.
    document.getElementById('state-select').addEventListener('change', function() {
      const stateFips = this.value;
      const countySelect = document.getElementById('county-select');
      countySelect.innerHTML = '<option value="">--Select County--</option>'; // reset dropdown
      if (stateFips) {
        const countyUrl = `https://api.census.gov/data/2023/acs/acs5?get=NAME&for=county:*&in=state:${stateFips}`;
        fetch(countyUrl)
          .then(response => response.json())
          .then(data => {
            // Skip header row (data[0])
            for (let i = 1; i < data.length; i++) {
              const countyName = data[i][0];
              const countyFips = data[i][2]; // county FIPS code is the third element
              const option = document.createElement('option');
              option.value = countyFips;
              option.textContent = countyName;
              countySelect.appendChild(option);
            }
          })
          .catch(error => {
            console.error('Error fetching counties:', error);
          });
      }
    });
    
    // Fetch income distribution data when the button is clicked.
    document.getElementById('get-income-btn').addEventListener('click', function() {
      const stateFips = document.getElementById('state-select').value;
      const countyFips = document.getElementById('county-select').value;
      const resultDiv = document.getElementById('result');
      resultDiv.innerHTML = ''; // clear previous results
      
      if (!stateFips || !countyFips) {
        resultDiv.textContent = 'Please select both a state and a county.';
        return;
      }
      
      // Build the API URL using ACS table B19001 for income distribution.
      // B19001_001E is the total households.
      // B19001_002E to B19001_017E are the household counts for each income bucket.
      const apiUrl = `https://api.census.gov/data/2023/acs/acs5?get=NAME,B19001_001E,B19001_002E,B19001_003E,B19001_004E,B19001_005E,B19001_006E,B19001_007E,B19001_008E,B19001_009E,B19001_010E,B19001_011E,B19001_012E,B19001_013E,B19001_014E,B19001_015E,B19001_016E,B19001_017E&for=county:${countyFips}&in=state:${stateFips}`;
      
      fetch(apiUrl)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.length < 2) {
            resultDiv.textContent = 'No data found.';
            return;
          }
          const headers = data[0];
          const values = data[1];
          const countyName = values[0];
          const totalHouseholds = parseInt(values[1]);
          
          // Income bucket labels corresponding to B19001_002E to B19001_017E
          const incomeBucketLabels = [
            "Less than $10,000",
            "$10,000 to $14,999",
            "$15,000 to $19,999",
            "$20,000 to $24,999",
            "$25,000 to $29,999",
            "$30,000 to $34,999",
            "$35,000 to $39,999",
            "$40,000 to $44,999",
            "$45,000 to $49,999",
            "$50,000 to $59,999",
            "$60,000 to $74,999",
            "$75,000 to $99,999",
            "$100,000 to $124,999",
            "$125,000 to $149,999",
            "$150,000 to $199,999",
            "$200,000 or more"
          ];
          
          let output = `<h2>${countyName}</h2>`;
          output += `<p><strong>Total Households:</strong> ${totalHouseholds.toLocaleString()}</p>`;
          output += `<h3>Income Distribution</h3>`;
          output += `<table>
                      <thead>
                        <tr>
                          <th>Income Range</th>
                          <th>Households</th>
                        </tr>
                      </thead>
                      <tbody>`;
          
          // Iterate through each income bucket
          for (let i = 0; i < incomeBucketLabels.length; i++) {
            const bucketValue = parseInt(values[i + 2]); // offset: values[0]=NAME, values[1]=total households
            output += `<tr>
                        <td>${incomeBucketLabels[i]}</td>
                        <td>${bucketValue.toLocaleString()}</td>
                      </tr>`;
          }
          
          output += `</tbody></table>`;
          output += `<p><strong>State FIPS:</strong> ${values[18]} | <strong>County FIPS:</strong> ${values[19]}</p>`;
          resultDiv.innerHTML = output;
        })
        .catch(error => {
          resultDiv.textContent = 'Error fetching data: ' + error.message;
        });
    });
  </script>
</body>
</html>
